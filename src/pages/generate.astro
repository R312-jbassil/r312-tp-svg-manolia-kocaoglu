---
import Layout from '../layouts/Layout.astro';
---

<Layout>
    <div class="container mx-auto p-6 space-y-6">
        <div class="flex gap-4 items-center justify-center">
            <input 
                id="user-prompt" 
                type="text" 
                placeholder="Describe your SVG..." 
                class="input input-bordered input-lg flex-1 max-w-md focus:input-primary" 
            />
            <button 
              id="generate-button" 
              class="btn btn-primary btn-lg hover:bg-primary-focus"
            >
              Generate
            </button>

            <button class="btn btn-secondary m-2" id="edit-button">Edit</button>
            <button class="btn btn-secondary m-2" id="save-button">Save</button>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="card bg-base-100 shadow-xl">
                <div class="card-header bg-base-200 px-4 py-2">
                    <h3 class="text-lg font-semibold">SVG Preview</h3>
                </div>
                <div class="card-body">
                    <div 
                        id="svg-container" 
                        class="min-h-64 border-2 border-dashed border-base-300 rounded-lg flex items-center justify-center bg-base-50"
                    >
                        <span class="text-base-content/50">SVG will appear here</span>
                    </div>
                </div>
            </div>

            <div class="card bg-base-100 shadow-xl">
                <div class="card-header bg-base-200 px-4 py-2">
                    <h3 class="text-lg font-semibold">SVG Code</h3>
                </div>
                <div class="card-body">
                    <pre 
                        id="svg-output" 
                        class="bg-base-200 p-4 rounded-lg overflow-auto min-h-64 text-sm"
                    >SVG code will appear here</pre>
                </div>
            </div>
        </div>
    </div>
</Layout>

<script>
    //@ts-nocheck

    
    
    async function generateSVG(prompt) {
        console.log('Generating SVG for prompt:', prompt);
        try {
            const res = await fetch('/api/generateSVG', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify( prompt ),
            });
            
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            
            const data = await res.json();
            return data.svg;
        } catch (error) {
            console.error('Error generating SVG:', error);
            return '<svg><text x="10" y="20" fill="red">Error generating SVG</text></svg>';
        }
    }

    let promptList = []

    async function handleSubmit() {
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // Réinitialiser la liste des prompts
    promptList.length = 0; 
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    }

    
    async function handleEdit() {
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner de chargement
    svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG généré : ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
}

const editButton = document.getElementById("edit-button");
if (editButton) {
    editButton.addEventListener("click", handleEdit);
}


    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        const generateButton = document.getElementById("generate-button");
        const promptElement = document.getElementById("user-prompt");
        
        if (generateButton) {
            generateButton.addEventListener("click", handleSubmit);
        }
        
        // Allow Enter key to submit
        if (promptElement) {
            promptElement.addEventListener("keypress", (e) => {
                if (e.key === 'Enter') {
                    handleSubmit();
                }
            });
        }
    });


</script>